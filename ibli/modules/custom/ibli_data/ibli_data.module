<?php
/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * Implements hook_menu().
 */
function ibli_data_menu() {
  $items = array();

  // Add our own autocomplete callback to pass also the group and
  // vocabulary info.
  $items['pim/save-pdf'] = array(
    'title' => 'Create PDF from map',
    'access arguments' => array('access content'),
    'page callback' => 'ibli_data_save_pdf',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Saves the image of the map as a PDF file.
 *
 * @return string.
 */
function ibli_data_save_pdf() {
  if (isset($_POST['map']) && isset($_POST['period'])) {
    $map = $_POST['map'];
    $title = $_POST['period'];
    $map_width = $_POST['map_width'];
    $map_height = $_POST['map_height'];

    // Include the main TCPDF library.
    $tcpdf_library = libraries_get_path('tcpdf') . '/tcpdf.php';
    include $tcpdf_library;

    // Determine page layout according to the map dimensions.
    $pagelayout = array($map_width, $map_height);

    $pdf = new TCPDF('L', 'px', $pagelayout, true, 'UTF-8', false);

    // Set margins.
    $pdf->SetMargins(0, 0, 0);

    // Set auto page breaks.
    $pdf->SetAutoPageBreak(false, 0);

    // Set image scale factor.
    $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

    // -------------------------------------------------------------------

    // Add a page.
    $pdf->AddPage();

    $pdf->SetXY(110, 200);

    // -------------------------------------------------------------------

    list($type, $data) = explode(';', $map);
    list(, $data)      = explode(',', $data);
    $data = base64_decode($data);

    $png_image = 'sites/default/files/' . $title . '.png';

    file_put_contents($png_image, $data);

    // Set JPEG quality.
    $pdf->setJPEGQuality(100);

    // The '@' character is used to indicate that follows an image data stream and not an image file name.
    $pdf->Image($png_image, 0, 0, $map_width, $map_height, 'PNG', '', 'top-left', false);

    $pdf_path = 'sites/default/files/' . $title . '.pdf';

    // Save the PDF file.
    $pdf->Output($pdf_path , 'F');

    // Delete the saved image.
    drupal_unlink($png_image);

    // Send the PDF file path.
    print $pdf_path;
  }
}

/**
 * Implements hook_cron().
 *
 * Stores a list of files locally, to avoid loading data from remote sources.
 */
function ibli_data_cron() {
  $urls = array (
    'IBLI_unit_premium_rates.csv' => 'https://raw.githubusercontent.com/Gizra/IBLI/master/dataProcessing/IBLI_unit_premium_rates.csv',
    'zCumNDVI_Percentile.csv' => 'https://raw.githubusercontent.com/Gizra/IBLI/master/dataProcessing/zCumNDVI_Percentile.csv',
    'KenyaEthiopia_IBLIunits_July2014.geojson' => 'https://raw.githubusercontent.com/Gizra/IBLI/master/dataProcessing/shapefiles/IBLIunits/KenyaEthiopia_IBLIunits_July2014.geojson',
  );

  $path = file_default_scheme() . '://data';
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);

  foreach ($urls as $file_name => $url) {
    $fp = fopen ($path . '/' . $file_name, 'w');
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_TIMEOUT, 50);
    curl_setopt($ch, CURLOPT_FILE, $fp);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_exec($ch);
    curl_close($ch);
    fclose($fp);
  }

  // Create a json file for Premium rates "15rate".
  _ibli_data_prepare_rates();
}

/**
 * Creates a json file containing all the Premium rates for all the provinces.
 */
function _ibli_data_prepare_rates() {
  $csv = array_map('str_getcsv', file('public://data/IBLI_unit_premium_rates.csv'));

  // Hide redundant columns.
  foreach ($csv as &$row) {
    unset($row[0]);
    unset($row[1]);
    unset($row[2]);
    unset($row[3]);
    unset($row[4]);
    // Fix indices.
    $row = array_values($row);
  }

  $raw_header = array_slice($csv, 0, 2);
  $header = $raw_header[0];
  $rows = array_slice($csv, 2);

  $periods = array_filter($header);
  unset($periods[0]);

  $rates = array();
  $id = array_search("IBLI_ID", $header);
  foreach ($rows as $row) {
    $rates[$row[$id]] = array();
    foreach ($periods as $rate_10_column => $period) {
      // The first column is "10rate" column, so we take the next column.
      $rates[$row[$id]][$period]  = $row[$rate_10_column + 1];
    }
  }

  $jsonRates = json_encode($rates);

  $path = file_default_scheme() . '://data';
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);

  $fp = fopen ($path . '/rates.json', 'w');
  fwrite($fp, $jsonRates);
  fclose($fp);
}
